{"version":3,"sources":["../src/lib/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import bunyanConfig = require('bunyan-config');\n// import * as bunyanConfig from 'bunyan-config';\nimport * as bunyan from 'bunyan';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as _ from 'lodash';\n\nlet defaultLogger: bunyan.Logger  = null;\nlet uncaughtExceptionHandlerBound = false;\nlet config                        = null;\n\nconst serializers = {\n  err: bunyan.stdSerializers.err,\n  error: bunyan.stdSerializers.err,\n  module: moduleSerializer,\n  req: reqSerializer,\n  res: bunyan.stdSerializers.req,\n  user: userSerializer,\n};\n\nfunction bindUncaughtExceptionHandler () {\n  if (!uncaughtExceptionHandlerBound) {\n    uncaughtExceptionHandlerBound = true;\n\n    process.on('uncaughtException', (err: Error) => {\n      if (defaultLogger != null) {\n        defaultLogger.error(err, '\\u2622 UncaughtException \\u2622');\n      } else {\n        console.error(`\\u2622 UncaughtException \\u2622: ${err.message}`);\n        console.error(err.stack);\n      }\n\n      return process.exit(1);\n    });\n  }\n}\n\n/**\n * Converts objects with key 'user'\n * @param  {Object} user a user model instance\n * @return {Object}            a sanitized user instance\n */\nfunction userSerializer (user: any) {\n  if ((user != null) && !_.isString(user)) {\n    user = {\n      user_id   : user._id || user.id,\n      user_name : user.username,\n    };\n  }\n\n  return user;\n};\n\n/**\n * Converts objects with key 'req'\n * @param  {Object} req the http request object\n * @return {Object}     the sanitized request object\n */\nfunction reqSerializer (req: any) {\n  if (_.get(req, 'connection') || _.get(req, 'headers')) {\n    req = {\n      headers      : req.headers,\n      method       : req.method,\n      url          : req.url,\n    };\n\n    _.assign(req, userSerializer(req.user));\n  }\n\n  return req;\n};\n\n/**\n * Converts a module object to its filename\n * @param  {Object} module a module instance\n * @return {String}        the module's filename\n */\nfunction moduleSerializer (module: any) {\n  if (_.get(module, 'filename')) {\n    module = path.basename(module.filename);\n  }\n\n  return module;\n};\n\nfunction init (configsPath = null, handleUncaughtExceptions = true) {\n  let configs = null;\n\n  if (handleUncaughtExceptions) {\n    // prefixing with `this` so spies can be used for testing\n    // see: http://stackoverflow.com/questions/26041079/sinon-spy-is-not-called-if-the-spied-method-is-called-indirectly\n    // TODO: ^^ doesn't work at runtime. disabling the test for the moment\n    bindUncaughtExceptionHandler();\n  }\n\n  if (configsPath) {\n    configs = bunyanConfig(JSON.parse(fs.readFileSync(configsPath, 'utf8')));\n  } else {\n    configs = {\n      name: 'default-logger',\n      serializers,\n      streams: [{\n        level: process.env.NODE_ENV === 'development' ? 'debug' : 'info',\n        stream: process.stdout,\n      }],\n    };\n  }\n\n  defaultLogger = bunyan.createLogger(configs);\n}\n\nfunction logger () {\n  if (defaultLogger == null) {\n    init();\n  }\n\n  return defaultLogger;\n}\n\nexport default {\n  init,\n  logger,\n  bindUncaughtExceptionHandler,\n  serializers,\n};\n"]}