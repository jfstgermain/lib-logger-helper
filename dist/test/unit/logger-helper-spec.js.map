{"version":3,"sources":["../src/test/unit/logger-helper-spec.ts"],"names":[],"mappings":";AACA,2CAA2C;AAC3C,6BAA6B;AAE7B,+BAA+B;AAC/B,wCAAwC;AAExC,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;AAEpB,oDAAoD;AACpD;IAGE,YAAY,IAAI;QACd,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACnB,CAAC;IAEM,KAAK,CAAC,GAAG;QACd,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACtB,CAAC;CACF;AAED,QAAQ,CAAC,0BAA0B,EAAE;IACnC,IAAI,MAAM,GAAQ,IAAI,CAAC;IAEvB,QAAQ,CAAC,SAAS,EAAE;QAElB,QAAQ,CAAC,sBAAsB,EAAE;YAC/B,MAAM,CAAC;gBACL,eAAY,CAAC,IAAI,EAAE,CAAC;gBACpB,MAAM,GAAG,eAAY,CAAC,MAAM,EAAE,CAAC;YACjC,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,gEAAgE,EAAE;gBACnE,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;gBAC3C,sDAAsD;YACxD,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,gDAAgD,EAAE;gBACnD,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,QAAQ,CAAC,CAAC,CAAC;YAChG,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,oDAAoD,EAAE;YAC7D,IAAI,GAAG,CAAC;YACR,IAAI,OAAO,CAAC;YAEZ,UAAU,CAAC;gBACT,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC;gBACjC,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,eAAY,EAAE,8BAA8B,CAAC,CAAC;YAClE,CAAC,CAAC,CAAC;YAEH,SAAS,CAAC;gBACR,OAAO,CAAC,OAAO,EAAE,CAAC;YACpB,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,4DAA4D,EAAE;gBAC/D,eAAY,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;gBAC/B,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;YACtC,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,uDAAuD,EAAE;gBAC1D,eAAY,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;gBAC9B,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;YAClC,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,IAAI,CAAC,iCAAiC,EAAE;QAC/C,OAAO;IACT,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,aAAa,EAAE;QACtB,IAAI,aAAa,GAAG,EAAE,CAAC;QAEvB,UAAU,CAAC;YACT,aAAa,GAAG,EAAE,CAAC;YAEnB,eAAY,CAAC,IAAI,EAAE,CAAC;YACpB,MAAM,GAAG,eAAY,CAAC,MAAM,EAAE,CAAC;YAC/B,MAAM,CAAC,SAAS,CAAC;gBACf,MAAM,EAAE,IAAI,eAAe,CAAC,aAAa,CAAC;gBAC1C,IAAI,EAAE,KAAK;aACZ,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,mBAAmB,EAAE;YAC5B,EAAE,CAAC,2CAA2C,EAAE;gBAC9C,MAAM,CAAC,IAAI,CAAC,EAAC,IAAI,EAAE,QAAQ,EAAC,CAAC,CAAC;gBAC9B,MAAM,CAAC,aAAa,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;gBACxC,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;YAC9D,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,2CAA2C,EAAE;gBAC9C,MAAM,CAAC,IAAI,CAAC,EAAC,IAAI,EAAE,IAAI,EAAC,CAAC,CAAC;gBAC1B,MAAM,CAAC,aAAa,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;gBACxC,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;YAC1D,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,qDAAqD,EAAE;gBACxD,MAAM,CAAC,IAAI,CAAC,EAAC,IAAI,EAAE;wBACjB,GAAG,EAAE,EAAE;wBACP,EAAE,EAAE,MAAM;wBACV,QAAQ,EAAE,SAAS;qBACpB,EAAC,CAAC,CAAC;gBAEJ,MAAM,CAAC,aAAa,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;gBACxC,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC;gBACvC,yDAAyD;gBACzD,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC;oBAC1C,OAAO,EAAE,MAAM;oBACf,SAAS,EAAE,SAAS;iBACrB,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,kBAAkB,EAAE;YAC3B,EAAE,CAAC,gGAAgG,EAAE;gBACnG,MAAM,YAAY,GAAG;oBACnB,MAAM,EAAE,QAAQ;oBAChB,MAAM,EAAE,QAAQ;iBACjB,CAAC;gBAEF,MAAM,CAAC,IAAI,CAAC;oBACV,GAAG,EAAE,YAAY;iBAClB,CAAC,CAAC;gBAEH,MAAM,CAAC,aAAa,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;gBACxC,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC;gBACtC,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;YAE3D,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,wDAAwD,EAAE;gBAC3D,MAAM,YAAY,GAAG;oBACnB,OAAO,EAAE;wBACP,iCAAiC;wBACjC,+BAA+B;wBAC/B,gDAAgD;qBACjD;oBACD,MAAM,EAAE,KAAK;oBACb,gBAAgB,EAAE,wBAAwB;oBAC1C,GAAG,EAAE,kCAAkC;iBACxC,CAAC;gBAEF,MAAM,CAAC,IAAI,CAAC;oBACV,GAAG,EAAE,YAAY;iBAClB,CAAC,CAAC;gBAEH,MAAM,CAAC,aAAa,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;gBACxC,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC;gBACtC,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC;gBAC3D,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;gBACpE,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;gBAClE,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;YAC9D,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,qBAAqB,EAAE;YAC9B,EAAE,CAAC,iFAAiF,EAAE;gBACpF,MAAM,YAAY,GAAG;oBACnB,MAAM,EAAE,QAAQ;oBAChB,MAAM,EAAE,QAAQ;iBACjB,CAAC;gBAEF,MAAM,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,YAAY,EAAE,CAAC,CAAC;gBAEtC,MAAM,CAAC,aAAa,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;gBACxC,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC;gBACzC,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;YAC9D,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,2DAA2D,EAAE;gBAC9D,MAAM,CAAC,IAAI,CAAC;oBACV,MAAM;iBACP,CAAC,CAAC;gBAEH,MAAM,CAAC,aAAa,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;gBACxC,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC;gBACzC,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC;YAEhF,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","file":"logger-helper-spec.js","sourcesContent":["\nimport loggerHelper from '../../lib/index';\nimport * as path from 'path';\nimport * as bunyan from 'bunyan';\nimport * as sinon from 'sinon';\nimport * as sinonChai from 'sinon-chai';\n\nchai.use(sinonChai);\n\n// Convenience stream used to capture logged objects\nclass CapturingStream {\n  private recs;\n\n  constructor(recs) {\n    this.recs = recs;\n  }\n\n  public write(rec) {\n    this.recs.push(rec);\n  }\n}\n\ndescribe('The logger helper module', function () {\n  let logger: any = null;\n\n  describe('#init()', function () {\n\n    describe('using default params', function () {\n      before(function () {\n        loggerHelper.init();\n        logger = loggerHelper.logger();\n      });\n\n      it('should use the default bunyan-config\\'s output stream (stdout)', function () {\n        expect(logger.streams).to.have.lengthOf(1);\n        // expect(logger.streams[0]).to.equal(process.stdout);\n      });\n\n      it('should have the default serializers registered', function () {\n        expect(logger.serializers).to.have.all.keys(['err', 'error', 'res', 'req', 'user', 'module']);\n      });\n    });\n\n    describe('when passing a value to `handleUncaughtExceptions`', function () {\n      let spy;\n      let sandbox;\n\n      beforeEach(function () {\n        sandbox = sinon.sandbox.create();\n        spy = sandbox.spy(loggerHelper, 'bindUncaughtExceptionHandler');\n      });\n\n      afterEach(function () {\n        sandbox.restore();\n      });\n\n      it('should not bind the `UncaughtException` handler if `false`', function () {\n        loggerHelper.init(null, false);\n        expect(spy).to.not.have.been.called;\n      });\n\n      it('should bind the `UncaughtException` handler if `true`', function () {\n        loggerHelper.init(null, true);\n        expect(spy).to.have.been.called;\n      });\n    });\n  });\n\n  describe.skip('#bindUncaughtExceptionHandler()', function () {\n    // it()\n  });\n\n  describe('serializers', function () {\n    let loggedEntries = [];\n\n    beforeEach(function () {\n      loggedEntries = [];\n\n      loggerHelper.init();\n      logger = loggerHelper.logger();\n      logger.addStream({\n        stream: new CapturingStream(loggedEntries),\n        type: 'raw',\n      });\n    });\n\n    describe('#userSerializer()', function () {\n      it('should return the input value if a string', function () {\n        logger.warn({user: 'a user'});\n        expect(loggedEntries).to.have.length(1);\n        expect(loggedEntries[0]).to.have.property('user', 'a user');\n      });\n\n      it('should return the input value if a `null`', function () {\n        logger.warn({user: null});\n        expect(loggedEntries).to.have.length(1);\n        expect(loggedEntries[0]).to.have.property('user', null);\n      });\n\n      it('should return a serialized version of a user object', function () {\n        logger.warn({user: {\n          age: 42,\n          id: 123456,\n          username: 'xstgeje',\n        }});\n\n        expect(loggedEntries).to.have.length(1);\n        expect(loggedEntries[0].user).to.exist;\n        // compare values inside object not the object refenrence\n        expect(loggedEntries[0].user).to.deep.equal({\n          user_id: 123456,\n          user_name: 'xstgeje',\n        });\n      });\n    });\n\n    describe('#reqSerializer()', function () {\n      it('should return the input value if the object doesn\\'t contain a `connection` or `headers` field', function () {\n        const loggedObject = {\n          field1: 'value1',\n          field2: 'value2',\n        };\n\n        logger.warn({\n          req: loggedObject,\n        });\n\n        expect(loggedEntries).to.have.length(1);\n        expect(loggedEntries[0].req).to.exist;\n        expect(loggedEntries[0].req).to.deep.equal(loggedObject);\n\n      });\n\n      it('should return a serialized version of the `req` object', function () {\n        const loggedObject = {\n          headers: [\n            'Accept-Language: en-us,en;q=0.5',\n            'Accept-Encoding: gzip,deflate',\n            'Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7',\n          ],\n          method: 'GET',\n          some_other_field: 'some other field value',\n          url: '/ville-de-montreal/logger-helper',\n        };\n\n        logger.warn({\n          req: loggedObject,\n        });\n\n        expect(loggedEntries).to.have.length(1);\n        expect(loggedEntries[0].req).to.exist;\n        expect(loggedEntries[0].req.some_other_field).to.not.exist;\n        expect(loggedEntries[0].req.headers).to.equal(loggedObject.headers);\n        expect(loggedEntries[0].req.method).to.equal(loggedObject.method);\n        expect(loggedEntries[0].req.url).to.equal(loggedObject.url);\n      });\n    });\n\n    describe('#moduleSerializer()', function () {\n      it('should return the input value if the object doesn\\'t contain a `filename` field', function () {\n        const loggedObject = {\n          field1: 'value1',\n          field2: 'value2',\n        };\n\n        logger.warn({ module: loggedObject });\n\n        expect(loggedEntries).to.have.length(1);\n        expect(loggedEntries[0].module).to.exist;\n        expect(loggedEntries[0].module).to.deep.equal(loggedObject);\n      });\n\n      it('should return a serialized version of the `module` object', function () {\n        logger.warn({\n          module,\n        });\n\n        expect(loggedEntries).to.have.length(1);\n        expect(loggedEntries[0].module).to.exist;\n        expect(loggedEntries[0].module).to.deep.equal(path.basename(module.filename));\n\n      });\n    });\n  });\n});\n"]}